<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
    <fullyQualifiedTypeName name="java.lang.ArrayIndexOutOfBoundsException"/>
    <fullyQualifiedTypeName name="char"/>
    <fullyQualifiedTypeName name="java.security.DrbgParameters.NextBytes"/>
    <fullyQualifiedTypeName name="javax.swing.plaf.basic.BasicScrollPaneUI.HSBChangeListener"/>
    <fullyQualifiedTypeName name="char_Stack.Stack_ch"/>
    <fullyQualifiedTypeName name="java.lang.Character"/>
    <fullyQualifiedTypeName name="stack_Int.StackInt"/>
    <fullyQualifiedTypeName name="java.util.concurrent.CountDownLatch"/>
    <fullyQualifiedTypeName name="queue_Using_Array.IntQueue"/>
    <fullyQualifiedTypeName name="customer_queue.Customer_Queue"/>
    <fullyQualifiedTypeName name="customer_queue.CustomerController"/>
    <fullyQualifiedTypeName name="customer_queue.Customer"/>
    <fullyQualifiedTypeName name="java.lang.reflect.Array"/>
    <fullyQualifiedTypeName name="javax.print.attribute.standard.JobMessageFromOperator"/>
    <fullyQualifiedTypeName name="javax.management.MalformedObjectNameException"/>
    <fullyQualifiedTypeName name="javax.management.loading.PrivateClassLoader"/>
    <fullyQualifiedTypeName name="javax.sql.rowset.JoinRowSet"/>
    <fullyQualifiedTypeName name="string_Linked_List.S_Linked_List"/>
    <fullyQualifiedTypeName name="java.lang.ClassCastException"/>
    <fullyQualifiedTypeName name="string_Linked_List.Node"/>
    <fullyQualifiedTypeName name="sorted_int.Sorted_list"/>
    <fullyQualifiedTypeName name="sorted_int.Linked_sort"/>
    <fullyQualifiedTypeName name="sorted_int.Node"/>
    <fullyQualifiedTypeName name="int_Linked_List.Linked_List"/>
    <fullyQualifiedTypeName name="int_Linked_List.Node"/>
    <fullyQualifiedTypeName name="java.lang.Boolean"/>
    <fullyQualifiedTypeName name="javax.print.attribute.Size2DSyntax"/>
    <fullyQualifiedTypeName name="doublyLinkedList.DoublyLink"/>
    <fullyQualifiedTypeName name="doublyLinkedList.Node"/>
    <fullyQualifiedTypeName name="dynamicLL.Node"/>
    <fullyQualifiedTypeName name="dynamicLL.StackEmptyException"/>
    <fullyQualifiedTypeName name="dynamicLL.DynamicStack"/>
    <fullyQualifiedTypeName name="java.security.PublicKey"/>
    <fullyQualifiedTypeName name="java.lang.Exception"/>
    <fullyQualifiedTypeName name="dynamicQueue.QEmptyException"/>
    <fullyQualifiedTypeName name="dynamicQueue.Node"/>
    <fullyQualifiedTypeName name="dynamicQueue.Queue"/>
    <fullyQualifiedTypeName name="int"/>
    <fullyQualifiedTypeName name="java.util.Arrays"/>
    <fullyQualifiedTypeName name="java.lang.RuntimeException"/>
    <fullyQualifiedTypeName name="java.lang.Override"/>
    <fullyQualifiedTypeName name="doubleEndedQueue.Queue_Empty_Exception"/>
    <fullyQualifiedTypeName name="doubleEndedQueue.Node"/>
    <fullyQualifiedTypeName name="java.util.function.BiConsumer"/>
    <fullyQualifiedTypeName name="java.lang.Integer"/>
    <fullyQualifiedTypeName name="java.awt.geom.IllegalPathStateException"/>
    <fullyQualifiedTypeName name="java.util.random.RandomGenerator.LeapableGenerator"/>
    <fullyQualifiedTypeName name="java.util.concurrent.ForkJoinPool.ManagedBlocker"/>
    <fullyQualifiedTypeName name="simple_BinaryTree.BinaryTree"/>
    <fullyQualifiedTypeName name="simple_BinaryTree.Node"/>
    <fullyQualifiedTypeName name="java.lang.NullPointerException"/>
    <fullyQualifiedTypeName name="java.lang.SecurityException"/>
    <fullyQualifiedTypeName name="binary_Search_Tree.Node"/>
    <fullyQualifiedTypeName name="java.lang.String"/>
    <fullyQualifiedTypeName name="adjacencyMatrix.Graph"/>
    <fullyQualifiedTypeName name="java.lang.Void"/>
    <fullyQualifiedTypeName name="simpleGraph.Graph"/>
    <fullyQualifiedTypeName name="java.lang.System"/>
    <fullyQualifiedTypeName name="javax.xml.transform.stax.StAXResult"/>
    <fullyQualifiedTypeName name="java.util.Scanner"/>
</qualifiedTypeNameHistroy>
